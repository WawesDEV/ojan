<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OJANix v4.0 Ultimate</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #00c896;
            --primary-dark: #009b7d;
            --secondary: #6f42c1;
            --secondary-dark: #5a32a8;
            --tertiary: #ff9f43;
            --tertiary-dark: #e67e22;
            --dark: #161b22;
            --darker: #0d1117;
            --light: #f0f6fc;
            --gray: #6e7681;
            --danger: #ff6b6b;
            --success: #20c997;
            --warning: #ffc107;
            --info: #17a2b8;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            background: linear-gradient(135deg, var(--dark), var(--darker));
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: var(--light);
            padding: 20px;
            overflow-x: hidden;
        }
        
        .container {
            width: 100%;
            max-width: 1000px;
            background: rgba(13, 17, 23, 0.9);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            padding: 30px;
            animation: fadeIn 0.5s ease-out;
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            position: relative;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo-icon {
            font-size: 28px;
            color: var(--primary);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        h1 {
            font-size: 28px;
            font-weight: 600;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin: 0;
        }
        
        .version {
            font-size: 14px;
            color: var(--gray);
            margin-left: 5px;
        }
        
        .theme-toggle {
            background: none;
            border: none;
            color: var(--gray);
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .theme-toggle:hover {
            color: var(--primary);
            transform: rotate(30deg);
        }
        
        .text-areas {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .text-group {
            position: relative;
        }
        
        .text-label {
            position: absolute;
            top: -10px;
            left: 15px;
            background: var(--darker);
            padding: 0 8px;
            font-size: 14px;
            color: var(--gray);
            border-radius: 4px;
            z-index: 1;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        textarea {
            width: 100%;
            min-height: 120px;
            padding: 15px;
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            font-size: 16px;
            background: var(--darker);
            color: var(--light);
            resize: vertical;
            outline: none;
            transition: all 0.3s;
            line-height: 1.5;
        }
        
        textarea:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(0, 200, 150, 0.2);
        }
        
        textarea::placeholder {
            color: rgba(255, 255, 255, 0.3);
        }
        
        #outputText {
            background: rgba(0, 200, 150, 0.05);
            border-color: rgba(0, 200, 150, 0.2);
        }
        
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .btn {
            padding: 12px 20px;
            font-size: 16px;
            font-weight: 500;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
            flex-grow: 1;
            justify-content: center;
            position: relative;
            overflow: hidden;
            min-width: 120px;
        }
        
        .btn::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: all 0.5s;
        }
        
        .btn:hover::after {
            left: 100%;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: var(--secondary-dark);
            transform: translateY(-2px);
        }
        
        .btn-tertiary {
            background-color: var(--tertiary);
            color: white;
        }
        
        .btn-tertiary:hover {
            background-color: var(--tertiary-dark);
            transform: translateY(-2px);
        }
        
        .btn-outline {
            background: transparent;
            color: var(--primary);
            border: 2px solid var(--primary);
        }
        
        .btn-outline:hover {
            background: rgba(0, 200, 150, 0.1);
            transform: translateY(-2px);
        }
        
        .btn-danger {
            background-color: var(--danger);
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #ff5252;
            transform: translateY(-2px);
        }
        
        .btn-success {
            background-color: var(--success);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #1aa179;
            transform: translateY(-2px);
        }
        
        .btn-warning {
            background-color: var(--warning);
            color: #212529;
        }
        
        .btn-warning:hover {
            background-color: #e0a800;
            transform: translateY(-2px);
        }
        
        .btn-info {
            background-color: var(--info);
            color: white;
        }
        
        .btn-info:hover {
            background-color: #138496;
            transform: translateY(-2px);
        }
        
        .file-actions {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .file-input {
            display: none;
        }
        
        .history-container {
            margin-top: 30px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding-top: 20px;
        }
        
        .history-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .history-list {
            max-height: 200px;
            overflow-y: auto;
            background: var(--darker);
            border-radius: 8px;
            padding: 10px;
            scrollbar-width: thin;
            scrollbar-color: var(--primary) var(--darker);
        }
        
        .history-list::-webkit-scrollbar {
            width: 8px;
        }
        
        .history-list::-webkit-scrollbar-track {
            background: var(--darker);
        }
        
        .history-list::-webkit-scrollbar-thumb {
            background-color: var(--primary);
            border-radius: 20px;
        }
        
        .history-item {
            padding: 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            justify-content: space-between;
            border-radius: 4px;
        }
        
        .history-item:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .history-item:last-child {
            border-bottom: none;
        }
        
        .history-time {
            font-size: 12px;
            color: var(--gray);
        }
        
        .clear-history {
            background: none;
            border: none;
            color: var(--gray);
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .clear-history:hover {
            color: var(--danger);
        }
        
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--darker);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s;
            z-index: 1000;
            border-left: 4px solid var(--primary);
            display: flex;
            align-items: center;
            gap: 10px;
            max-width: 400px;
        }
        
        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .toast.error {
            border-left-color: var(--danger);
        }
        
        .toast.warning {
            border-left-color: var(--warning);
        }
        
        .toast.success {
            border-left-color: var(--success);
        }
        
        .toast.info {
            border-left-color: var(--info);
        }
        
        .char-count {
            font-size: 12px;
            color: var(--gray);
            text-align: right;
            margin-top: 5px;
            display: flex;
            justify-content: space-between;
        }
        
        .watermark {
            position: absolute;
            bottom: 10px;
            right: 10px;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.2);
        }
        
        /* Programming Mode Styles */
        .mode-switcher {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            overflow: hidden;
            flex-wrap: wrap;
        }
        
        .mode-btn {
            flex: 1;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
            background: transparent;
            color: var(--gray);
            font-weight: 500;
            min-width: 120px;
        }
        
        .mode-btn.active {
            background: var(--primary);
            color: white;
        }
        
        .mode-btn:hover:not(.active) {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .mode-content {
            display: none;
        }
        
        .mode-content.active {
            display: block;
        }
        
        #programmingMode {
            min-height: 200px;
            font-family: 'Courier New', monospace;
            white-space: pre;
        }
        
        #outputFrame {
            width: 100%;
            height: 300px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            background: white;
            margin-top: 15px;
        }
        
        .run-btn {
            background-color: var(--secondary);
            color: white;
            margin-top: 10px;
        }
        
        .run-btn:hover {
            background-color: var(--secondary-dark);
        }
        
        /* Advanced Features Panel */
        .advanced-panel {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }
        
        .advanced-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
        }
        
        .advanced-content {
            display: none;
            padding-top: 10px;
        }
        
        .advanced-content.show {
            display: block;
        }
        
        .settings-group {
            margin-bottom: 15px;
        }
        
        .settings-title {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .settings-options {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .option-btn {
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            color: var(--light);
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .option-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .option-btn.active {
            background: var(--primary);
            border-color: var(--primary);
        }
        
        /* Language Selector */
        .language-selector {
            position: absolute;
            top: 15px;
            right: 60px;
        }
        
        .language-btn {
            background: none;
            border: none;
            color: var(--gray);
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            padding: 5px;
        }
        
        .language-btn:hover {
            color: var(--primary);
        }
        
        .language-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: var(--darker);
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            padding: 10px 0;
            z-index: 100;
            display: none;
            min-width: 120px;
        }
        
        .language-dropdown.show {
            display: block;
            animation: fadeInUp 0.2s;
        }
        
        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .language-option {
            padding: 8px 15px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .language-option:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 15px;
        }
        
        .tab {
            padding: 10px 15px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }
        
        .tab.active {
            border-bottom-color: var(--primary);
            color: var(--primary);
        }
        
        .tab:hover:not(.active) {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Tooltip */
        .tooltip {
            position: relative;
            display: inline-block;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: var(--darker);
            color: var(--light);
            text-align: center;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        /* Progress Bar */
        .progress-container {
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            margin-top: 10px;
            overflow: hidden;
        }
        
        .progress-bar {
            height: 100%;
            background: var(--primary);
            width: 0%;
            transition: width 0.3s;
        }
        
        /* Notification Badge */
        .badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 20px;
            height: 20px;
            padding: 0 5px;
            background: var(--danger);
            color: white;
            border-radius: 10px;
            font-size: 12px;
            font-weight: bold;
            margin-left: 5px;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            .controls {
                flex-direction: column;
            }
            
            .file-actions {
                flex-direction: column;
            }
            
            .mode-btn {
                min-width: 100px;
                padding: 8px;
                font-size: 14px;
            }
            
            .btn {
                padding: 10px 15px;
                font-size: 14px;
            }
            
            .language-selector {
                position: static;
                margin-left: auto;
                margin-right: 10px;
            }
            
            .language-dropdown {
                right: auto;
                left: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">
                <i class="fas fa-code logo-icon"></i>
                <h1>OJANix <span class="version">v4.0 Ultimate</span></h1>
            </div>
            
            <div class="language-selector">
                <button class="language-btn" id="languageBtn">
                    <i class="fas fa-globe"></i>
                </button>
                <div class="language-dropdown" id="languageDropdown">
                    <div class="language-option" data-lang="en">
                        <i class="fas fa-language"></i> English
                    </div>
                    <div class="language-option" data-lang="ru">
                        <i class="fas fa-language"></i> Русский
                    </div>
                    <div class="language-option" data-lang="es">
                        <i class="fas fa-language"></i> Español
                    </div>
                    <div class="language-option" data-lang="fr">
                        <i class="fas fa-language"></i> Français
                    </div>
                </div>
            </div>
            
            <button class="theme-toggle" id="themeToggle">
                <i class="fas fa-moon"></i>
            </button>
        </div>
        
        <div class="mode-switcher">
            <button class="mode-btn active" data-mode="translator">
                <i class="fas fa-exchange-alt"></i> Translator
            </button>
            <button class="mode-btn" data-mode="programming">
                <i class="fas fa-code"></i> OJANix Programming
            </button>
            <button class="mode-btn" data-mode="settings">
                <i class="fas fa-cog"></i> Settings
            </button>
            <button class="mode-btn" data-mode="docs">
                <i class="fas fa-book"></i> Documentation
            </button>
        </div>
        
        <!-- Translator Mode -->
        <div class="mode-content active" id="translatorMode">
            <div class="tabs">
                <div class="tab active" data-tab="standard">Standard</div>
                <div class="tab" data-tab="advanced">Advanced</div>
                <div class="tab" data-tab="batch">Batch Processing</div>
            </div>
            
            <div class="tab-content active" id="standardTab">
                <div class="text-areas">
                    <div class="text-group">
                        <span class="text-label">
                            <i class="fas fa-keyboard"></i> Input Text (RU, EN, Ojanix)
                            <span class="tooltip">
                                <i class="fas fa-info-circle"></i>
                                <span class="tooltiptext">Enter text in Russian, English, or Ojanix encoded format</span>
                            </span>
                        </span>
                        <textarea id="inputText" placeholder="Enter text to translate..."></textarea>
                        <div class="char-count" id="inputCount">
                            <span>0 characters</span>
                            <span>0 words</span>
                        </div>
                    </div>
                    
                    <div class="text-group">
                        <span class="text-label">
                            <i class="fas fa-file-code"></i> Output Text
                            <span class="tooltip">
                                <i class="fas fa-info-circle"></i>
                                <span class="tooltiptext">Translated text will appear here</span>
                            </span>
                        </span>
                        <textarea id="outputText" placeholder="Translation will appear here..." readonly></textarea>
                        <div class="char-count" id="outputCount">
                            <span>0 characters</span>
                            <span>0 words</span>
                        </div>
                    </div>
                </div>
                
                <div class="controls">
                    <button class="btn btn-primary" onclick="encodeText()">
                        <i class="fas fa-lock"></i> Encode to Ojanix
                    </button>
                    <button class="btn btn-secondary" onclick="decodeTextRU()">
                        <i class="fas fa-unlock"></i> Decode to Russian
                    </button>
                    <button class="btn btn-secondary" onclick="decodeTextEN()">
                        <i class="fas fa-unlock"></i> Decode to English
                    </button>
                    <button class="btn btn-tertiary" onclick="analyzeText()">
                        <i class="fas fa-chart-bar"></i> Analyze Text
                    </button>
                </div>
                
                <div class="file-actions">
                    <button class="btn btn-outline" onclick="document.getElementById('fileInput').click()">
                        <i class="fas fa-file-import"></i> Import Text File
                    </button>
                    <input type="file" id="fileInput" class="file-input" accept=".txt,.text,.doc,.docx,.odt">
                    
                    <button class="btn btn-outline" onclick="saveOutputAsFile()">
                        <i class="fas fa-file-export"></i> Export Output
                    </button>
                    
                    <button class="btn btn-danger" onclick="clearAll()">
                        <i class="fas fa-trash"></i> Clear All
                    </button>
                    
                    <button class="btn btn-outline" onclick="copyToClipboard()">
                        <i class="fas fa-copy"></i> Copy Output
                    </button>
                    
                    <button class="btn btn-success" onclick="speakOutput()">
                        <i class="fas fa-volume-up"></i> Speak Output
                    </button>
                </div>
                
                <div class="advanced-panel">
                    <div class="advanced-header" onclick="toggleAdvancedPanel()">
                        <h3><i class="fas fa-caret-down"></i> Additional Options</h3>
                    </div>
                    <div class="advanced-content" id="advancedOptions">
                        <div class="settings-group">
                            <div class="settings-title">
                                <i class="fas fa-sliders-h"></i> Encoding Options
                            </div>
                            <div class="settings-options">
                                <button class="option-btn" data-option="reverse">Reverse Encoding</button>
                                <button class="option-btn" data-option="uppercase">Uppercase Output</button>
                                <button class="option-btn" data-option="lowercase">Lowercase Output</button>
                                <button class="option-btn active" data-option="preserve">Preserve Case</button>
                            </div>
                        </div>
                        
                        <div class="settings-group">
                            <div class="settings-title">
                                <i class="fas fa-key"></i> Security
                            </div>
                            <div class="settings-options">
                                <button class="option-btn" data-option="encrypt">Encrypt with Password</button>
                                <button class="option-btn" data-option="hash">Generate Hash</button>
                            </div>
                        </div>
                        
                        <div class="settings-group">
                            <div class="settings-title">
                                <i class="fas fa-magic"></i> Formatting
                            </div>
                            <div class="settings-options">
                                <button class="option-btn" onclick="formatText('trim')">Trim Whitespace</button>
                                <button class="option-btn" onclick="formatText('removeEmpty')">Remove Empty Lines</button>
                                <button class="option-btn" onclick="formatText('singleLine')">Convert to Single Line</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="history-container">
                    <div class="history-title">
                        <h3><i class="fas fa-history"></i> Translation History <span class="badge" id="historyBadge">0</span></h3>
                        <div>
                            <button class="clear-history" onclick="clearHistory()">
                                <i class="fas fa-trash-alt"></i> Clear History
                            </button>
                            <button class="clear-history" onclick="exportHistory()">
                                <i class="fas fa-download"></i> Export
                            </button>
                        </div>
                    </div>
                    <div class="history-list" id="historyList">
                        <!-- History items will be added here -->
                    </div>
                </div>
            </div>
            
            <div class="tab-content" id="advancedTab">
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-keyboard"></i> Custom Mapping
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Define your own character mappings in JSON format</span>
                        </span>
                    </span>
                    <textarea id="customMapping" placeholder='{"A": "1", "B": "2", ...}'></textarea>
                </div>
                
                <div class="controls">
                    <button class="btn btn-primary" onclick="loadCustomMapping()">
                        <i class="fas fa-upload"></i> Load Mapping
                    </button>
                    <button class="btn btn-secondary" onclick="saveCustomMapping()">
                        <i class="fas fa-save"></i> Save Mapping
                    </button>
                    <button class="btn btn-info" onclick="applyCustomMapping()">
                        <i class="fas fa-magic"></i> Apply Mapping
                    </button>
                    <button class="btn btn-danger" onclick="resetCustomMapping()">
                        <i class="fas fa-undo"></i> Reset to Default
                    </button>
                </div>
                
                <div class="text-group" style="margin-top: 20px;">
                    <span class="text-label">
                        <i class="fas fa-code"></i> Pre-Processing Script
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Write JavaScript to pre-process text before encoding/decoding</span>
                        </span>
                    </span>
                    <textarea id="preProcessScript" placeholder="function preProcess(text) { return text.toUpperCase(); }"></textarea>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-code"></i> Post-Processing Script
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Write JavaScript to post-process text after encoding/decoding</span>
                        </span>
                    </span>
                    <textarea id="postProcessScript" placeholder="function postProcess(text) { return text.toLowerCase(); }"></textarea>
                </div>
                
                <div class="controls">
                    <button class="btn btn-primary" onclick="testPreProcessScript()">
                        <i class="fas fa-vial"></i> Test Pre-Process
                    </button>
                    <button class="btn btn-primary" onclick="testPostProcessScript()">
                        <i class="fas fa-vial"></i> Test Post-Process
                    </button>
                </div>
            </div>
            
            <div class="tab-content" id="batchTab">
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-tasks"></i> Batch Input (One per line)
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Enter multiple texts to process at once, one per line</span>
                        </span>
                    </span>
                    <textarea id="batchInput" placeholder="Enter multiple texts to process, one per line..."></textarea>
                </div>
                
                <div class="controls">
                    <button class="btn btn-primary" onclick="batchEncode()">
                        <i class="fas fa-lock"></i> Batch Encode
                    </button>
                    <button class="btn btn-secondary" onclick="batchDecodeRU()">
                        <i class="fas fa-unlock"></i> Batch Decode (RU)
                    </button>
                    <button class="btn btn-secondary" onclick="batchDecodeEN()">
                        <i class="fas fa-unlock"></i> Batch Decode (EN)
                    </button>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-list-alt"></i> Batch Results
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Results of batch processing will appear here</span>
                        </span>
                    </span>
                    <textarea id="batchOutput" placeholder="Batch processing results will appear here..." readonly></textarea>
                </div>
                
                <div class="file-actions">
                    <button class="btn btn-outline" onclick="document.getElementById('batchFileInput').click()">
                        <i class="fas fa-file-import"></i> Import Batch File
                    </button>
                    <input type="file" id="batchFileInput" class="file-input" accept=".txt,.csv">
                    
                    <button class="btn btn-outline" onclick="exportBatchResults()">
                        <i class="fas fa-file-export"></i> Export Results
                    </button>
                    
                    <button class="btn btn-danger" onclick="clearBatch()">
                        <i class="fas fa-trash"></i> Clear Batch
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Programming Mode -->
        <div class="mode-content" id="programmingModeContent">
            <div class="tabs">
                <div class="tab active" data-tab="editor">Code Editor</div>
                <div class="tab" data-tab="templates">Templates</div>
                <div class="tab" data-tab="debug">Debugger</div>
            </div>
            
            <div class="tab-content active" id="editorTab">
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-code"></i> OJANix Code
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Write your OJANix code with special encoded elements</span>
                        </span>
                    </span>
                    <textarea id="ojanixCode" placeholder="Write your OJANix code here..."></textarea>
                </div>
                
                <div class="controls">
                    <button class="btn run-btn" onclick="runOjanixCode()">
                        <i class="fas fa-play"></i> Run Code
                    </button>
                    <button class="btn btn-info" onclick="debugOjanixCode()">
                        <i class="fas fa-bug"></i> Debug
                    </button>
                    <button class="btn btn-success" onclick="validateOjanixCode()">
                        <i class="fas fa-check"></i> Validate
                    </button>
                    <button class="btn btn-warning" onclick="optimizeOjanixCode()">
                        <i class="fas fa-bolt"></i> Optimize
                    </button>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-terminal"></i> Console Output
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Debugging and error messages will appear here</span>
                        </span>
                    </span>
                    <textarea id="consoleOutput" placeholder="Console output will appear here..." readonly></textarea>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-desktop"></i> Output Preview
                        <span class="tooltip">
                            <i class="fas fa-info-circle"></i>
                            <span class="tooltiptext">Rendered output of your OJANix code</span>
                        </span>
                    </span>
                    <iframe id="outputFrame" sandbox="allow-scripts"></iframe>
                </div>
                
                <div class="file-actions">
                    <button class="btn btn-outline" onclick="document.getElementById('codeFileInput').click()">
                        <i class="fas fa-file-import"></i> Import Code File
                    </button>
                    <input type="file" id="codeFileInput" class="file-input" accept=".ojx,.txt,.html,.js">
                    
                    <button class="btn btn-outline" onclick="saveOjanixCode()">
                        <i class="fas fa-file-export"></i> Export Code
                    </button>
                    
                    <button class="btn btn-danger" onclick="clearCode()">
                        <i class="fas fa-trash"></i> Clear Code
                    </button>
                    
                    <button class="btn btn-success" onclick="shareOjanixCode()">
                        <i class="fas fa-share-alt"></i> Share
                    </button>
                </div>
            </div>
            
            <div class="tab-content" id="templatesTab">
                <div class="controls">
                    <button class="btn btn-primary" onclick="loadTemplate('basic')">
                        <i class="fas fa-file-code"></i> Basic Template
                    </button>
                    <button class="btn btn-primary" onclick="loadTemplate('calculator')">
                        <i class="fas fa-calculator"></i> Calculator
                    </button>
                    <button class="btn btn-primary" onclick="loadTemplate('game')">
                        <i class="fas fa-gamepad"></i> Simple Game
                    </button>
                    <button class="btn btn-primary" onclick="loadTemplate('form')">
                        <i class="fas fa-edit"></i> Form Example
                    </button>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-info-circle"></i> Template Description
                    </span>
                    <textarea id="templateDescription" placeholder="Select a template to view its description..." readonly></textarea>
                </div>
            </div>
            
            <div class="tab-content" id="debugTab">
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-bug"></i> Debugger Controls
                    </span>
                    <div class="controls">
                        <button class="btn btn-primary" onclick="startDebugging()">
                            <i class="fas fa-play"></i> Start Debugging
                        </button>
                        <button class="btn btn-warning" onclick="pauseDebugging()">
                            <i class="fas fa-pause"></i> Pause
                        </button>
                        <button class="btn btn-danger" onclick="stopDebugging()">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                        <button class="btn btn-info" onclick="stepOver()">
                            <i class="fas fa-step-forward"></i> Step Over
                        </button>
                    </div>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-list-ol"></i> Breakpoints
                    </span>
                    <div class="controls">
                        <button class="btn btn-outline" onclick="addBreakpoint()">
                            <i class="fas fa-plus"></i> Add Breakpoint
                        </button>
                        <button class="btn btn-outline" onclick="clearBreakpoints()">
                            <i class="fas fa-trash"></i> Clear All
                        </button>
                    </div>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-variable"></i> Variables Watch
                    </span>
                    <textarea id="variablesWatch" placeholder="Variables will appear here during debugging..." readonly></textarea>
                </div>
                
                <div class="text-group">
                    <span class="text-label">
                        <i class="fas fa-history"></i> Call Stack
                    </span>
                    <textarea id="callStack" placeholder="Call stack will appear here during debugging..." readonly></textarea>
                </div>
            </div>
            
            <div class="history-container">
                <h3><i class="fas fa-info-circle"></i> OJANix Programming Guide</h3>
                <div class="history-list">
                    <div class="history-item">
                        <div><strong>Basic Syntax:</strong> OJANix code is HTML with special encoded elements</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Variables:</strong> Use {=variable=} to declare and display variables</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Functions:</strong> {!funcName arg1 arg2!} to call functions</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Built-in Functions:</strong> print, alert, math, if, loop, array, object</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Example:</strong> {=name=}1{!print Hello {=name=!!}</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Settings Mode -->
        <div class="mode-content" id="settingsModeContent">
            <div class="text-group">
                <span class="text-label">
                    <i class="fas fa-user-cog"></i> Application Settings
                </span>
                <div class="settings-options" style="flex-direction: column; gap: 15px;">
                    <div>
                        <label>
                            <input type="checkbox" id="autoSaveSetting" checked> Auto-save history
                        </label>
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" id="notificationsSetting" checked> Enable notifications
                        </label>
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" id="animationsSetting" checked> Enable animations
                        </label>
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" id="soundSetting"> Enable sound effects
                        </label>
                    </div>
                    <div>
                        <label>
                            Editor font size: <input type="range" id="fontSizeSetting" min="12" max="24" value="16">
                            <span id="fontSizeValue">16px</span>
                        </label>
                    </div>
                </div>
            </div>
            
            <div class="text-group">
                <span class="text-label">
                    <i class="fas fa-key"></i> Security Settings
                </span>
                <div class="settings-options" style="flex-direction: column; gap: 15px;">
                    <div>
                        <label>
                            <input type="checkbox" id="clearClipboardSetting"> Clear clipboard after copy
                        </label>
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" id="historyEncryptionSetting"> Encrypt history
                        </label>
                    </div>
                    <div>
                        <label>
                            Set password: <input type="password" id="appPassword" placeholder="Optional">
                        </label>
                    </div>
                </div>
            </div>
            
            <div class="controls">
                <button class="btn btn-primary" onclick="saveSettings()">
                    <i class="fas fa-save"></i> Save Settings
                </button>
                <button class="btn btn-danger" onclick="resetSettings()">
                    <i class="fas fa-undo"></i> Reset to Defaults
                </button>
                <button class="btn btn-info" onclick="exportSettings()">
                    <i class="fas fa-download"></i> Export Settings
                </button>
                <button class="btn btn-outline" onclick="importSettings()">
                    <i class="fas fa-upload"></i> Import Settings
                </button>
            </div>
            
            <div class="text-group">
                <span class="text-label">
                    <i class="fas fa-database"></i> Data Management
                </span>
                <div class="controls">
                    <button class="btn btn-warning" onclick="backupData()">
                        <i class="fas fa-file-archive"></i> Create Backup
                    </button>
                    <button class="btn btn-outline" onclick="restoreBackup()">
                        <i class="fas fa-file-import"></i> Restore Backup
                    </button>
                    <button class="btn btn-danger" onclick="clearAllData()">
                        <i class="fas fa-trash"></i> Clear All Data
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Documentation Mode -->
        <div class="mode-content" id="docsModeContent">
            <div class="tabs">
                <div class="tab active" data-tab="gettingStarted">Getting Started</div>
                <div class="tab" data-tab="languageRef">Language Reference</div>
                <div class="tab" data-tab="examples">Examples</div>
                <div class="tab" data-tab="faq">FAQ</div>
            </div>
            
            <div class="tab-content active" id="gettingStartedTab">
                <div class="history-list">
                    <div class="history-item">
                        <div><strong>Welcome to OJANix v4.0 Ultimate</strong></div>
                        <div>This is the most advanced version of the OJANix translator and programming environment.</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Key Features:</strong></div>
                        <div>
                            <ul style="padding-left: 20px; margin-top: 5px;">
                                <li>Advanced text encoding/decoding</li>
                                <li>OJANix programming language</li>
                                <li>Batch processing capabilities</li>
                                <li>Custom mappings and scripts</li>
                                <li>Comprehensive debugging tools</li>
                                <li>Template library</li>
                                <li>Multi-language support</li>
                            </ul>
                        </div>
                    </div>
                    <div class="history-item">
                        <div><strong>Quick Start:</strong></div>
                        <div>
                            <ol style="padding-left: 20px; margin-top: 5px;">
                                <li>Enter text in the input area</li>
                                <li>Click "Encode" or "Decode" buttons</li>
                                <li>View results in the output area</li>
                                <li>Use the history panel to recall previous translations</li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="tab-content" id="languageRefTab">
                <div class="history-list">
                    <div class="history-item">
                        <div><strong>Russian to Ojanix Mapping:</strong></div>
                        <div>А-1, Б-2, В-3, Г-4, Д-5, Е-6, Ё-7, Ж-8, З-9, И-0, Й-@, К-#, Л-$, М-%, Н-&, О-*, П-(, Р-), С--, Т-+, У-=, Ф-{, Х-}, Ц-[, Ч-], Ш-|, Щ-:, Ы-;, Э-", Ю-', Я-!</div>
                    </div>
                    <div class="history-item">
                        <div><strong>English to Ojanix Mapping:</strong></div>
                        <div>Q-1, W-², E-3, R-4, T-5, Y-6, U-7, I-8, O-9, P-0, A-@, S-#, D-$, F-_, G-&, H--, J-+, K-(, L-), Z-*, X-", C-', V-:, B-;, N-!, M-?</div>
                    </div>
                    <div class="history-item">
                        <div><strong>OJANix Programming Syntax:</strong></div>
                        <div>
                            <ul style="padding-left: 20px; margin-top: 5px;">
                                <li>Variables: {=varName=}</li>
                                <li>Functions: {!funcName arg1 arg2!}</li>
                                <li>Conditionals: {!if condition then else!}</li>
                                <li>Loops: {!loop start end step!}</li>
                                <li>Arrays: {!array create 1 2 3!}</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="tab-content" id="examplesTab">
                <div class="history-list">
                    <div class="history-item" onclick="loadExample('helloWorld')" style="cursor: pointer;">
                        <div><strong>Hello World:</strong></div>
                        <div>{!print Hello World!}</div>
                    </div>
                    <div class="history-item" onclick="loadExample('calculator')" style="cursor: pointer;">
                        <div><strong>Simple Calculator:</strong></div>
                        <div>{=a=}5{=b=}10{!print {=a=} + {=b=} = {!math {=a=}+{=b=}!} !}</div>
                    </div>
                    <div class="history-item" onclick="loadExample('conditional')" style="cursor: pointer;">
                        <div><strong>Conditional Example:</strong></div>
                        <div>{=age=}25{!if {=age=}>=18 then {!print Adult!} else {!print Minor!}!}</div>
                    </div>
                    <div class="history-item" onclick="loadExample('loop')" style="cursor: pointer;">
                        <div><strong>Loop Example:</strong></div>
                        <div>{!loop 1 5 1}{!print Iteration {=i=}!}{!endloop!}</div>
                    </div>
                </div>
            </div>
            
            <div class="tab-content" id="faqTab">
                <div class="history-list">
                    <div class="history-item">
                        <div><strong>Q: What is OJANix?</strong></div>
                        <div>A: OJANix is both an encoding system and a programming language that uses special character mappings.</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Q: Can I create my own mappings?</strong></div>
                        <div>A: Yes! Use the Advanced tab in Translator mode to define custom mappings.</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Q: Is OJANix programming Turing complete?</strong></div>
                        <div>A: Yes, the OJANix programming language is Turing complete and can perform any computation.</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Q: How secure is OJANix encoding?</strong></div>
                        <div>A: While not encryption, it provides basic obfuscation. For real security, use the password features.</div>
                    </div>
                    <div class="history-item">
                        <div><strong>Q: Can I contribute to OJANix?</strong></div>
                        <div>A: Yes! The project is open-source. Contact the developers for contribution guidelines.</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="watermark">OJANix v4.0 Ultimate • Enhanced Edition</div>
    </div>
    
    <div class="toast" id="toast"></div>

    <script>
        // Enhanced character mappings with more languages
        const ruMapping = {
            'А': '1', 'Б': '2', 'В': '3', 'Г': '4', 'Д': '5', 'Е': '6', 'Ё': '7', 'Ж': '8', 'З': '9', 'И': '0',
            'Й': '@', 'К': '#', 'Л': '$', 'М': '%', 'Н': '&', 'О': '*', 'П': '(', 'Р': ')', 'С': '-', 'Т': '+',
            'У': '=', 'Ф': '{', 'Х': '}', 'Ц': '[', 'Ч': ']', 'Ш': '|', 'Щ': ':', 'Ы': ';', 'Э': '"', 'Ю': '\'',
            'Я': '!',
            'а': '1', 'б': '2', 'в': '3', 'г': '4', 'д': '5', 'е': '6', 'ё': '7', 'ж': '8', 'з': '9', 'и': '0',
            'й': '@', 'к': '#', 'л': '$', 'м': '%', 'н': '&', 'о': '*', 'п': '(', 'р': ')', 'с': '-', 'т': '+',
            'у': '=', 'ф': '{', 'х': '}', 'ц': '[', 'ч': ']', 'ш': '|', 'щ': ':', 'ы': ';', 'э': '"', 'ю': '\'',
            'я': '!'
        };

        const engMapping = {
            'Q': '1', 'W': '²', 'E': '3', 'R': '4', 'T': '5', 'Y': '6', 'U': '7', 'I': '8', 'O': '9', 'P': '0',
            'A': '@', 'S': '#', 'D': '$', 'F': '_', 'G': '&', 'H': '--', 'J': '+', 'K': '(', 'L': ')',
            'Z': '*', 'X': '"', 'C': "'", 'V': ':', 'B': ';', 'N': '!', 'M': '?',
            'q': '1', 'w': '²', 'e': '3', 'r': '4', 't': '5', 'y': '6', 'u': '7', 'i': '8', 'o': '9', 'p': '0',
            'a': '@', 's': '#', 'd': '$', 'f': '_', 'g': '&', 'h': '--', 'j': '+', 'k': '(', 'l': ')',
            'z': '*', 'x': '"', 'c': "'", 'v': ':', 'b': ';', 'n': '!', 'm': '?'
        };

        // Additional language mappings
        const esMapping = {
            'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6', 'G': '7', 'H': '8', 'I': '9', 'J': '0',
            'K': '@', 'L': '#', 'M': '$', 'N': '%', 'Ñ': '&', 'O': '*', 'P': '(', 'Q': ')', 'R': '-', 'S': '+',
            'T': '=', 'U': '{', 'V': '}', 'W': '[', 'X': ']', 'Y': '|', 'Z': ':',
            'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': '0',
            'k': '@', 'l': '#', 'm': '$', 'n': '%', 'ñ': '&', 'o': '*', 'p': '(', 'q': ')', 'r': '-', 's': '+',
            't': '=', 'u': '{', 'v': '}', 'w': '[', 'x': ']', 'y': '|', 'z': ':'
        };

        const frMapping = {
            'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6', 'G': '7', 'H': '8', 'I': '9', 'J': '0',
            'K': '@', 'L': '#', 'M': '$', 'N': '%', 'O': '&', 'P': '*', 'Q': '(', 'R': ')', 'S': '-', 'T': '+',
            'U': '=', 'V': '{', 'W': '}', 'X': '[', 'Y': ']', 'Z': '|',
            'À': '!', 'Â': '?', 'Ç': ':', 'È': ';', 'É': '"', 'Ê': '\'', 'Ë': '_', 'Î': '~', 'Ï': '^', 'Ô': '`',
            'Ù': '/', 'Û': '\\', 'Ü': '°',
            'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': '0',
            'k': '@', 'l': '#', 'm': '$', 'n': '%', 'o': '&', 'p': '*', 'q': '(', 'r': ')', 's': '-', 't': '+',
            'u': '=', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|',
            'à': '!', 'â': '?', 'ç': ':', 'è': ';', 'é': '"', 'ê': '\'', 'ë': '_', 'î': '~', 'ï': '^', 'ô': '`',
            'ù': '/', 'û': '\\', 'ü': '°'
        };

        // DOM elements
        const inputText = document.getElementById('inputText');
        const outputText = document.getElementById('outputText');
        const inputCount = document.getElementById('inputCount');
        const outputCount = document.getElementById('outputCount');
        const historyList = document.getElementById('historyList');
        const historyBadge = document.getElementById('historyBadge');
        const toast = document.getElementById('toast');
        const fileInput = document.getElementById('fileInput');
        const themeToggle = document.getElementById('themeToggle');
        const ojanixCode = document.getElementById('ojanixCode');
        const outputFrame = document.getElementById('outputFrame');
        const codeFileInput = document.getElementById('codeFileInput');
        const modeButtons = document.querySelectorAll('.mode-btn');
        const modeContents = document.querySelectorAll('.mode-content');
        const tabs = document.querySelectorAll('.tab');
        const tabContents = document.querySelectorAll('.tab-content');
        const languageBtn = document.getElementById('languageBtn');
        const languageDropdown = document.getElementById('languageDropdown');
        const advancedOptions = document.getElementById('advancedOptions');
        const customMapping = document.getElementById('customMapping');
        const preProcessScript = document.getElementById('preProcessScript');
        const postProcessScript = document.getElementById('postProcessScript');
        const batchInput = document.getElementById('batchInput');
        const batchOutput = document.getElementById('batchOutput');
        const batchFileInput = document.getElementById('batchFileInput');
        const consoleOutput = document.getElementById('consoleOutput');
        const variablesWatch = document.getElementById('variablesWatch');
        const callStack = document.getElementById('callStack');
        const templateDescription = document.getElementById('templateDescription');
        const autoSaveSetting = document.getElementById('autoSaveSetting');
        const notificationsSetting = document.getElementById('notificationsSetting');
        const animationsSetting = document.getElementById('animationsSetting');
        const soundSetting = document.getElementById('soundSetting');
        const fontSizeSetting = document.getElementById('fontSizeSetting');
        const fontSizeValue = document.getElementById('fontSizeValue');
        const clearClipboardSetting = document.getElementById('clearClipboardSetting');
        const historyEncryptionSetting = document.getElementById('historyEncryptionSetting');
        const appPassword = document.getElementById('appPassword');

        // Initialize
        let translationsHistory = JSON.parse(localStorage.getItem('ojanixHistory')) || [];
        let isDarkMode = localStorage.getItem('ojanixDarkMode') !== 'false';
        let currentLanguage = localStorage.getItem('ojanixLanguage') || 'en';
        let currentCustomMapping = JSON.parse(localStorage.getItem('ojanixCustomMapping')) || {};
        let currentSettings = JSON.parse(localStorage.getItem('ojanixSettings')) || {
            autoSave: true,
            notifications: true,
            animations: true,
            sound: false,
            fontSize: 16,
            clearClipboard: false,
            historyEncryption: false
        };
        let debugMode = false;
        let debugPaused = false;
        let breakpoints = [];
        let currentDebugLine = 0;
        
        // Set initial theme and settings
        updateTheme();
        updateCharCounts();
        renderHistory();
        applySettings();
        updateLanguage();

        // Event listeners
        inputText.addEventListener('input', updateCharCounts);
        fileInput.addEventListener('change', handleFileSelect);
        themeToggle.addEventListener('click', toggleTheme);
        codeFileInput.addEventListener('change', handleCodeFileSelect);
        languageBtn.addEventListener('click', toggleLanguageDropdown);
        document.addEventListener('click', closeLanguageDropdown);
        batchFileInput.addEventListener('change', handleBatchFileSelect);
        fontSizeSetting.addEventListener('input', updateFontSizePreview);
        
        // Mode switching
        modeButtons.forEach(button => {
            button.addEventListener('click', () => {
                const mode = button.getAttribute('data-mode');
                switchMode(mode);
            });
        });

        // Tab switching
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                switchTab(tabId);
            });
        });

        // Language selection
        document.querySelectorAll('.language-option').forEach(option => {
            option.addEventListener('click', () => {
                currentLanguage = option.getAttribute('data-lang');
                localStorage.setItem('ojanixLanguage', currentLanguage);
                updateLanguage();
                showToast(`Language set to ${getLanguageName(currentLanguage)}`, 'info');
                languageDropdown.classList.remove('show');
            });
        });

        // Functions
        function updateLanguage() {
            // This is a simplified implementation - in a real app you would have full translations
            if (currentLanguage === 'ru') {
                document.title = "OJANix v4.0 - Русская версия";
                inputText.placeholder = "Введите текст для перевода...";
                outputText.placeholder = "Здесь появится перевод...";
            } else {
                document.title = "OJANix v4.0 Ultimate";
                inputText.placeholder = "Enter text to translate...";
                outputText.placeholder = "Translation will appear here...";
            }
        }

        function getLanguageName(code) {
            const languages = {
                'en': 'English',
                'ru': 'Russian',
                'es': 'Spanish',
                'fr': 'French'
            };
            return languages[code] || code;
        }

        function toggleLanguageDropdown() {
            languageDropdown.classList.toggle('show');
        }

        function closeLanguageDropdown(e) {
            if (!languageBtn.contains(e.target) {
                languageDropdown.classList.remove('show');
            }
        }

        function switchMode(mode) {
            modeButtons.forEach(btn => btn.classList.remove('active'));
            modeContents.forEach(content => content.classList.remove('active'));
            
            document.querySelector(`.mode-btn[data-mode="${mode}"]`).classList.add('active');
            document.getElementById(`${mode}ModeContent`).classList.add('active');
            
            showToast(`Switched to ${mode} mode`, 'info');
        }
        
        function switchTab(tabId) {
            // Get parent tab container
            const tabContainer = document.querySelector(`.tab[data-tab="${tabId}"]`).parentNode;
            
            // Deactivate all tabs in this container
            tabContainer.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            
            // Activate the clicked tab
            tabContainer.querySelector(`.tab[data-tab="${tabId}"]`).classList.add('active');
            
            // Deactivate all tab contents in this container
            const contentContainer = tabContainer.nextElementSibling || tabContainer.parentNode.querySelector('.tab-content-container');
            contentContainer.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Activate the corresponding content
            document.getElementById(`${tabId}Tab`).classList.add('active');
        }

        function encodeText() {
            let text = inputText.value;
            if (!text.trim()) {
                showToast('Please enter some text to encode', 'error');
                return;
            }
            
            // Apply pre-processing if available
            if (preProcessScript.value.trim()) {
                try {
                    const preProcessFunc = new Function('text', preProcessScript.value);
                    text = preProcessFunc(text);
                } catch (e) {
                    showToast(`Pre-processing error: ${e.message}`, 'error');
                    return;
                }
            }
            
            let result = '';
            
            for (let char of text) {
                if (currentCustomMapping[char]) {
                    result += currentCustomMapping[char];
                } else if (ruMapping[char]) {
                    result += ruMapping[char];
                } else if (engMapping[char]) {
                    result += engMapping[char];
                } else {
                    result += char;
                }
            }
            
            // Apply post-processing if available
            if (postProcessScript.value.trim()) {
                try {
                    const postProcessFunc = new Function('text', postProcessScript.value);
                    result = postProcessFunc(result);
                } catch (e) {
                    showToast(`Post-processing error: ${e.message}`, 'error');
                    return;
                }
            }
            
            outputText.value = result;
            updateCharCounts();
            addToHistory(text, result, 'encode');
            showToast('Text encoded to Ojanix!', 'success');
        }

        function decodeTextRU() {
            const reverseRuMapping = Object.fromEntries(
                Object.entries(ruMapping).map(([k, v]) => [v, k.toLowerCase()])
            );
            
            let text = inputText.value;
            if (!text.trim()) {
                showToast('Please enter some text to decode', 'error');
                return;
            }
            
            // Apply pre-processing if available
            if (preProcessScript.value.trim()) {
                try {
                    const preProcessFunc = new Function('text', preProcessScript.value);
                    text = preProcessFunc(text);
                } catch (e) {
                    showToast(`Pre-processing error: ${e.message}`, 'error');
                    return;
                }
            }
            
            let result = '';
            
            for (let char of text) {
                result += reverseRuMapping[char] || char;
            }
            
            // Apply post-processing if available
            if (postProcessScript.value.trim()) {
                try {
                    const postProcessFunc = new Function('text', postProcessScript.value);
                    result = postProcessFunc(result);
                } catch (e) {
                    showToast(`Post-processing error: ${e.message}`, 'error');
                    return;
                }
            }
            
            outputText.value = result;
            updateCharCounts();
            addToHistory(text, result, 'decode-ru');
            showToast('Text decoded to Russian!', 'success');
        }

        function decodeTextEN() {
            const reverseEngMapping = Object.fromEntries(
                Object.entries(engMapping).map(([k, v]) => [v, k.toLowerCase()])
            );
            
            let text = inputText.value;
            if (!text.trim()) {
                showToast('Please enter some text to decode', 'error');
                return;
            }
            
            // Apply pre-processing if available
            if (preProcessScript.value.trim()) {
                try {
                    const preProcessFunc = new Function('text', preProcessScript.value);
                    text = preProcessFunc(text);
                } catch (e) {
                    showToast(`Pre-processing error: ${e.message}`, 'error');
                    return;
                }
            }
            
            let result = '';
            let skip = false;
            
            for (let i = 0; i < text.length; i++) {
                if (skip) {
                    skip = false;
                    continue;
                }
                
                let char = text[i];
                let nextChar = text[i + 1] || '';
                
                if (char === '-' && nextChar === '-') {
                    result += 'h';
                    skip = true;
                } else {
                    result += reverseEngMapping[char] || char;
                }
            }
            
            // Apply post-processing if available
            if (postProcessScript.value.trim()) {
                try {
                    const postProcessFunc = new Function('text', postProcessScript.value);
                    result = postProcessFunc(result);
                } catch (e) {
                    showToast(`Post-processing error: ${e.message}`, 'error');
                    return;
                }
            }
            
            outputText.value = result;
            updateCharCounts();
            addToHistory(text, result, 'decode-en');
            showToast('Text decoded to English!', 'success');
        }

        function analyzeText() {
            const text = inputText.value;
            if (!text.trim()) {
                showToast('Please enter some text to analyze', 'error');
                return;
            }
            
            // Character count
            const charCount = text.length;
            
            // Word count (simplified)
            const wordCount = text.trim() === '' ? 0 : text.trim().split(/\s+/).length;
            
            // Line count
            const lineCount = text.trim() === '' ? 0 : text.split('\n').length;
            
            // Most common character
            const charFrequency = {};
            for (const char of text) {
                charFrequency[char] = (charFrequency[char] || 0) + 1;
            }
            const mostCommonChar = Object.entries(charFrequency).sort((a, b) => b[1] - a[1])[0] || ['N/A', 0];
            
            // Language detection (simplified)
            let detectedLanguage = 'Unknown';
            if (/[а-яА-ЯЁё]/.test(text)) {
                detectedLanguage = 'Russian';
            } else if (/[a-zA-Z]/.test(text)) {
                detectedLanguage = 'English';
            }
            
            // Check if text is already encoded
            let isEncoded = false;
            for (const char of text) {
                if (Object.values(ruMapping).includes(char) || Object.values(engMapping).includes(char)) {
                    isEncoded = true;
                    break;
                }
            }
            
            // Create analysis report
            const analysisReport = `Text Analysis Report:
            
Characters: ${charCount}
Words: ${wordCount}
Lines: ${lineCount}
Most Common Character: '${mostCommonChar[0]}' (${mostCommonChar[1]} occurrences)
Detected Language: ${detectedLanguage}
Possible Encoded Text: ${isEncoded ? 'Yes' : 'No'}`;
            
            outputText.value = analysisReport;
            updateCharCounts();
            showToast('Text analysis complete!', 'success');
        }

        function updateCharCounts() {
            const inputTextValue = inputText.value;
            const outputTextValue = outputText.value;
            
            // Character count
            const inputCharCount = inputTextValue.length;
            const outputCharCount = outputTextValue.length;
            
            // Word count (simplified)
            const inputWordCount = inputTextValue.trim() === '' ? 0 : inputTextValue.trim().split(/\s+/).length;
            const outputWordCount = outputTextValue.trim() === '' ? 0 : outputTextValue.trim().split(/\s+/).length;
            
            // Update display
            inputCount.innerHTML = `<span>${inputCharCount} characters</span><span>${inputWordCount} words</span>`;
            outputCount.innerHTML = `<span>${outputCharCount} characters</span><span>${outputWordCount} words</span>`;
        }

        function addToHistory(input, output, type) {
            if (!currentSettings.autoSave) return;
            
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            const dateString = now.toLocaleDateString();
            
            const historyItem = {
                input,
                output,
                type,
                timestamp: `${dateString} ${timeString}`
            };
            
            translationsHistory.unshift(historyItem);
            if (translationsHistory.length > 20) {
                translationsHistory.pop();
            }
            
            localStorage.setItem('ojanixHistory', JSON.stringify(translationsHistory));
            renderHistory();
        }

        function renderHistory() {
            historyList.innerHTML = '';
            
            if (translationsHistory.length === 0) {
                historyList.innerHTML = '<div class="history-item" style="color: var(--gray);">No history yet</div>';
                historyBadge.textContent = '0';
                return;
            }
            
            translationsHistory.forEach((item, index) => {
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                historyItem.title = `Type: ${item.type}\nTime: ${item.timestamp}`;
                
                let icon = '';
                if (item.type === 'encode') {
                    icon = '<i class="fas fa-lock" style="color: var(--primary);"></i>';
                } else if (item.type.startsWith('decode')) {
                    icon = '<i class="fas fa-unlock" style="color: var(--secondary);"></i>';
                }
                
                historyItem.innerHTML = `
                    <div>
                        ${icon} ${item.input.substring(0, 30)}${item.input.length > 30 ? '...' : ''}
                    </div>
                    <div class="history-time">${item.timestamp}</div>
                `;
                
                historyItem.addEventListener('click', () => {
                    inputText.value = item.input;
                    outputText.value = item.output;
                    updateCharCounts();
                    showToast('History item loaded!', 'info');
                });
                
                historyList.appendChild(historyItem);
            });
            
            historyBadge.textContent = translationsHistory.length;
        }

        function clearHistory() {
            translationsHistory = [];
            localStorage.setItem('ojanixHistory', JSON.stringify(translationsHistory));
            renderHistory();
            showToast('History cleared!', 'success');
        }

        function exportHistory() {
            if (translationsHistory.length === 0) {
                showToast('No history to export', 'error');
                return;
            }
            
            const historyData = JSON.stringify(translationsHistory, null, 2);
            const blob = new Blob([historyData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ojanix-history-${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('History exported!', 'success');
        }

        function clearAll() {
            inputText.value = '';
            outputText.value = '';
            updateCharCounts();
            showToast('Cleared all text!', 'success');
        }

        function copyToClipboard() {
            if (!outputText.value) {
                showToast('No output to copy!', 'error');
                return;
            }
            
            navigator.clipboard.writeText(outputText.value)
                .then(() => {
                    showToast('Copied to clipboard!', 'success');
                    if (currentSettings.clearClipboard) {
                        setTimeout(() => {
                            navigator.clipboard.writeText('');
                        }, 10000);
                    }
                })
                .catch(() => showToast('Failed to copy!', 'error'));
        }

        function speakOutput() {
            if (!outputText.value) {
                showToast('No output to speak!', 'error');
                return;
            }
            
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(outputText.value);
                utterance.lang = currentLanguage === 'ru' ? 'ru-RU' : 'en-US';
                speechSynthesis.speak(utterance);
                showToast('Speaking output...', 'info');
            } else {
                showToast('Text-to-speech not supported in your browser', 'error');
            }
        }

        function saveOutputAsFile() {
            if (!outputText.value) {
                showToast('No output to save!', 'error');
                return;
            }
            
            const blob = new Blob([outputText.value], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ojanix-translation-${new Date().toISOString().slice(0, 10)}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('File saved!', 'success');
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (e) => {
                inputText.value = e.target.result;
                updateCharCounts();
                showToast('File imported successfully!', 'success');
            };
            reader.onerror = () => {
                showToast('Error reading file!', 'error');
            };
            reader.readAsText(file);
            
            // Reset file input
            event.target.value = '';
        }

        function showToast(message, type = 'info') {
            if (!currentSettings.notifications) return;
            
            toast.textContent = message;
            toast.className = 'toast';
            toast.classList.add(type);
            
            // Set icon based on type
            let icon = '';
            switch(type) {
                case 'success': icon = '<i class="fas fa-check-circle"></i>'; break;
                case 'error': icon = '<i class="fas fa-exclamation-circle"></i>'; break;
                case 'warning': icon = '<i class="fas fa-exclamation-triangle"></i>'; break;
                default: icon = '<i class="fas fa-info-circle"></i>';
            }
            
            toast.innerHTML = `${icon} ${message}`;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        function toggleTheme() {
            isDarkMode = !isDarkMode;
            localStorage.setItem('ojanixDarkMode', isDarkMode);
            updateTheme();
            showToast(`Switched to ${isDarkMode ? 'dark' : 'light'} mode`, 'info');
        }

        function updateTheme() {
            if (isDarkMode) {
                document.documentElement.style.setProperty('--dark', '#161b22');
                document.documentElement.style.setProperty('--darker', '#0d1117');
                document.documentElement.style.setProperty('--light', '#f0f6fc');
                themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
            } else {
                document.documentElement.style.setProperty('--dark', '#f0f2f5');
                document.documentElement.style.setProperty('--darker', '#ffffff');
                document.documentElement.style.setProperty('--light', '#24292e');
                themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
            }
        }
        
        function toggleAdvancedPanel() {
            advancedOptions.classList.toggle('show');
            const icon = advancedOptions.previousElementSibling.querySelector('i');
            if (advancedOptions.classList.contains('show')) {
                icon.className = 'fas fa-caret-up';
            } else {
                icon.className = 'fas fa-caret-down';
            }
        }
        
        function loadCustomMapping() {
            try {
                const mapping = JSON.parse(customMapping.value);
                currentCustomMapping = mapping;
                localStorage.setItem('ojanixCustomMapping', JSON.stringify(currentCustomMapping));
                showToast('Custom mapping loaded!', 'success');
            } catch (e) {
                showToast(`Invalid JSON: ${e.message}`, 'error');
            }
        }
        
        function saveCustomMapping() {
            customMapping.value = JSON.stringify(currentCustomMapping, null, 2);
            showToast('Custom mapping displayed in editor', 'info');
        }
        
        function applyCustomMapping() {
            if (!customMapping.value.trim()) {
                showToast('No custom mapping defined', 'error');
                return;
            }
            
            try {
                const mapping = JSON.parse(customMapping.value);
                currentCustomMapping = mapping;
                localStorage.setItem('ojanixCustomMapping', JSON.stringify(currentCustomMapping));
                showToast('Custom mapping applied!', 'success');
            } catch (e) {
                showToast(`Invalid JSON: ${e.message}`, 'error');
            }
        }
        
        function resetCustomMapping() {
            currentCustomMapping = {};
            customMapping.value = '';
            localStorage.removeItem('ojanixCustomMapping');
            showToast('Reset to default mapping', 'success');
        }
        
        function testPreProcessScript() {
            if (!preProcessScript.value.trim()) {
                showToast('No pre-process script defined', 'error');
                return;
            }
            
            try {
                const testText = "Test input 123";
                const preProcessFunc = new Function('text', preProcessScript.value);
                const result = preProcessFunc(testText);
                
                showToast(`Pre-process test: "${testText}" → "${result}"`, 'info');
            } catch (e) {
                showToast(`Script error: ${e.message}`, 'error');
            }
        }
        
        function testPostProcessScript() {
            if (!postProcessScript.value.trim()) {
                showToast('No post-process script defined', 'error');
                return;
            }
            
            try {
                const testText = "Test output 123";
                const postProcessFunc = new Function('text', postProcessScript.value);
                const result = postProcessFunc(testText);
                
                showToast(`Post-process test: "${testText}" → "${result}"`, 'info');
            } catch (e) {
                showToast(`Script error: ${e.message}`, 'error');
            }
        }
        
        function formatText(action) {
            let text = inputText.value;
            if (!text.trim()) {
                showToast('No text to format', 'error');
                return;
            }
            
            switch(action) {
                case 'trim':
                    text = text.trim();
                    break;
                case 'removeEmpty':
                    text = text.split('\n').filter(line => line.trim() !== '').join('\n');
                    break;
                case 'singleLine':
                    text = text.replace(/\s+/g, ' ').trim();
                    break;
                default:
                    showToast('Unknown format action', 'error');
                    return;
            }
            
            inputText.value = text;
            updateCharCounts();
            showToast(`Text formatted (${action})`, 'success');
        }
        
        function batchEncode() {
            if (!batchInput.value.trim()) {
                showToast('No batch input to process', 'error');
                return;
            }
            
            const lines = batchInput.value.split('\n');
            let results = [];
            
            for (const line of lines) {
                if (!line.trim()) continue;
                
                let result = '';
                for (let char of line) {
                    if (currentCustomMapping[char]) {
                        result += currentCustomMapping[char];
                    } else if (ruMapping[char]) {
                        result += ruMapping[char];
                    } else if (engMapping[char]) {
                        result += engMapping[char];
                    } else {
                        result += char;
                    }
                }
                
                results.push(`${line} → ${result}`);
            }
            
            batchOutput.value = results.join('\n');
            showToast(`Processed ${lines.length} lines`, 'success');
        }
        
        function batchDecodeRU() {
            if (!batchInput.value.trim()) {
                showToast('No batch input to process', 'error');
                return;
            }
            
            const reverseRuMapping = Object.fromEntries(
                Object.entries(ruMapping).map(([k, v]) => [v, k.toLowerCase()])
            );
            
            const lines = batchInput.value.split('\n');
            let results = [];
            
            for (const line of lines) {
                if (!line.trim()) continue;
                
                let result = '';
                for (let char of line) {
                    result += reverseRuMapping[char] || char;
                }
                
                results.push(`${line} → ${result}`);
            }
            
            batchOutput.value = results.join('\n');
            showToast(`Processed ${lines.length} lines`, 'success');
        }
        
        function batchDecodeEN() {
            if (!batchInput.value.trim()) {
                showToast('No batch input to process', 'error');
                return;
            }
            
            const reverseEngMapping = Object.fromEntries(
                Object.entries(engMapping).map(([k, v]) => [v, k.toLowerCase()])
            );
            
            const lines = batchInput.value.split('\n');
            let results = [];
            
            for (const line of lines) {
                if (!line.trim()) continue;
                
                let result = '';
                let skip = false;
                
                for (let i = 0; i < line.length; i++) {
                    if (skip) {
                        skip = false;
                        continue;
                    }
                    
                    let char = line[i];
                    let nextChar = line[i + 1] || '';
                    
                    if (char === '-' && nextChar === '-') {
                        result += 'h';
                        skip = true;
                    } else {
                        result += reverseEngMapping[char] || char;
                    }
                }
                
                results.push(`${line} → ${result}`);
            }
            
            batchOutput.value = results.join('\n');
            showToast(`Processed ${lines.length} lines`, 'success');
        }
        
        function handleBatchFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (e) => {
                batchInput.value = e.target.result;
                showToast('Batch file imported successfully!', 'success');
            };
            reader.onerror = () => {
                showToast('Error reading batch file!', 'error');
            };
            reader.readAsText(file);
            
            // Reset file input
            event.target.value = '';
        }
        
        function exportBatchResults() {
            if (!batchOutput.value) {
                showToast('No batch results to export', 'error');
                return;
            }
            
            const blob = new Blob([batchOutput.value], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ojanix-batch-results-${new Date().toISOString().slice(0, 10)}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('Batch results exported!', 'success');
        }
        
        function clearBatch() {
            batchInput.value = '';
            batchOutput.value = '';
            showToast('Batch processing cleared', 'success');
        }
        
        // Programming Mode Functions
        function runOjanixCode() {
            const code = ojanixCode.value;
            if (!code.trim()) {
                showToast('No code to run!', 'error');
                return;
            }
            
            try {
                // Process OJANix code (simple example - in reality you'd need a proper parser)
                let processedCode = code;
                
                // Simple variable substitution {=var=}
                processedCode = processedCode.replace(/{=([a-zA-Z0-9_]+)=}/g, (match, varName) => {
                    return `<span id="ojanix-var-${varName}"></span>`;
                });
                
                // Simple function calls {!func args!}
                processedCode = processedCode.replace(/{!([a-zA-Z0-9_]+)(.*?)!}/g, (match, funcName, args) => {
                    args = args.trim();
                    switch(funcName.toLowerCase()) {
                        case 'print':
                            return `<script>document.write(${args})<\/script>`;
                        case 'alert':
                            return `<script>alert(${args})<\/script>`;
                        case 'math':
                            return `<script>document.write(eval(${args}))<\/script>`;
                        case 'if':
                            return `<script>if(${args.split(' then ')[0]}) { document.write(${args.split(' then ')[1].split(' else ')[0]}) } else { document.write(${args.split(' else ')[1] || "''"}) }<\/script>`;
                        default:
                            return `<!-- Unknown function: ${funcName} -->`;
                    }
                });
                
                // Create a complete HTML document
                const htmlDoc = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>OJANix Program</title>
                        <style>
                            body { font-family: Arial, sans-serif; padding: 20px; }
                        </style>
                    </head>
                    <body>
                        ${processedCode}
                        <script>
                            // Variable assignment handler
                            document.addEventListener('DOMContentLoaded', function() {
                                const varElements = document.querySelectorAll('[id^="ojanix-var-"]');
                                varElements.forEach(el => {
                                    const varName = el.id.replace('ojanix-var-', '');
                                    el.textContent = window[varName] || '';
                                });
                            });
                        <\/script>
                    </body>
                    </html>
                `;
                
                // Display in iframe
                outputFrame.srcdoc = htmlDoc;
                consoleOutput.value = 'Code executed successfully with no errors.';
                showToast('Code executed successfully!', 'success');
            } catch (error) {
                consoleOutput.value = `Error: ${error.message}\n${error.stack}`;
                showToast(`Error: ${error.message}`, 'error');
                console.error(error);
            }
        }
        
        function debugOjanixCode() {
            if (debugMode) {
                stopDebugging();
                return;
            }
            
            debugMode = true;
            debugPaused = false;
            breakpoints = [];
            currentDebugLine = 0;
            
            consoleOutput.value = 'Debugger started. Set breakpoints and click "Start Debugging".';
            showToast('Debugger initialized. Set breakpoints and start debugging.', 'info');
        }
        
        function startDebugging() {
            if (!debugMode) {
                showToast('Start the debugger first', 'error');
                return;
            }
            
            debugPaused = false;
            consoleOutput.value = 'Debugging in progress...';
            showToast('Debugging started', 'info');
            
            // In a real implementation, you would step through the code execution
            // This is a simplified simulation
            setTimeout(() => {
                variablesWatch.value = 'Simulated variables:\n\nx = 10\ny = "hello"\nz = true';
                callStack.value = 'Simulated call stack:\n\n1. main()\n2. calculate()\n3. printResult()';
                
                if (breakpoints.length > 0) {
                    debugPaused = true;
                    consoleOutput.value = 'Breakpoint hit on line ' + breakpoints[0];
                    showToast('Breakpoint hit', 'warning');
                } else {
                    debugPaused = false;
                    consoleOutput.value = 'Debugging completed';
                    showToast('Debugging completed', 'success');
                }
            }, 1000);
        }
        
        function pauseDebugging() {
            if (!debugMode) {
                showToast('Debugger not active', 'error');
                return;
            }
            
            debugPaused = true;
            consoleOutput.value = 'Debugging paused';
            showToast('Debugging paused', 'warning');
        }
        
        function stopDebugging() {
            debugMode = false;
            debugPaused = false;
            consoleOutput.value = 'Debugger stopped';
            variablesWatch.value = '';
            callStack.value = '';
            showToast('Debugger stopped', 'info');
        }
        
        function stepOver() {
            if (!debugMode) {
                showToast('Debugger not active', 'error');
                return;
            }
            
            if (!debugPaused) {
                showToast('Debugger not paused', 'error');
                return;
            }
            
            consoleOutput.value = 'Stepped over line ' + (currentDebugLine + 1);
            currentDebugLine++;
            showToast('Stepped to next line', 'info');
        }
        
        function addBreakpoint() {
            if (!debugMode) {
                showToast('Debugger not active', 'error');
                return;
            }
            
            const line = prompt('Enter line number for breakpoint:');
            if (line && !isNaN(line)) {
                breakpoints.push(parseInt(line));
                consoleOutput.value = `Breakpoint added at line ${line}`;
                showToast(`Breakpoint added at line ${line}`, 'info');
            }
        }
        
        function clearBreakpoints() {
            breakpoints = [];
            consoleOutput.value = 'All breakpoints cleared';
            showToast('Breakpoints cleared', 'success');
        }
        
        function validateOjanixCode() {
            const code = ojanixCode.value;
            if (!code.trim()) {
                showToast('No code to validate', 'error');
                return;
            }
            
            // Simple validation - check for basic syntax errors
            try {
                // Check for unclosed tags
                const openTags = code.match(/{[!=]/g) || [];
                const closeTags = code.match(/[!=]}/g) || [];
                
                if (openTags.length !== closeTags.length) {
                    throw new Error('Mismatched tags - some tags are not properly closed');
                }
                
                // Check for unknown functions
                const functionCalls = code.match(/{!([a-zA-Z0-9_]+)/g) || [];
                const knownFunctions = ['print', 'alert', 'math', 'if', 'loop'];
                
                for (const call of functionCalls) {
                    const funcName = call.substring(2);
                    if (!knownFunctions.includes(funcName)) {
                        throw new Error(`Unknown function: ${funcName}`);
                    }
                }
                
                consoleOutput.value = 'Code validation passed with no errors.';
                showToast('Code is valid!', 'success');
            } catch (error) {
                consoleOutput.value = `Validation error: ${error.message}`;
                showToast(`Validation error: ${error.message}`, 'error');
            }
        }
        
        function optimizeOjanixCode() {
            let code = ojanixCode.value;
            if (!code.trim()) {
                showToast('No code to optimize', 'error');
                return;
            }
            
            // Simple optimizations
            let originalLength = code.length;
            
            // Remove extra whitespace
            code = code.replace(/\s+/g, ' ').trim();
            
            // Remove comments (simplified)
            code = code.replace(/<!--.*?-->/g, '');
            
            const optimizedLength = code.length;
            const reduction = originalLength - optimizedLength;
            
            ojanixCode.value = code;
            consoleOutput.value = `Optimization complete. Reduced size by ${reduction} characters (${Math.round((reduction / originalLength) * 100)}%).`;
            showToast(`Code optimized (saved ${reduction} chars)`, 'success');
        }
        
        function saveOjanixCode() {
            if (!ojanixCode.value) {
                showToast('No code to save!', 'error');
                return;
            }
            
            const blob = new Blob([ojanixCode.value], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ojanix-program-${new Date().toISOString().slice(0, 10)}.ojx`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('Code saved!', 'success');
        }
        
        function shareOjanixCode() {
            if (!ojanixCode.value) {
                showToast('No code to share!', 'error');
                return;
            }
            
            // In a real app, you would use a sharing API or generate a shareable link
            // This is a simplified version that just copies to clipboard
            navigator.clipboard.writeText(ojanixCode.value)
                .then(() => showToast('Code copied to clipboard - paste to share!', 'info'))
                .catch(() => showToast('Failed to copy code', 'error'));
        }
        
        function clearCode() {
            ojanixCode.value = '';
            outputFrame.srcdoc = '';
            consoleOutput.value = '';
            showToast('Code cleared!', 'success');
        }
        
        function handleCodeFileSelect(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (e) => {
                ojanixCode.value = e.target.result;
                showToast('Code file imported successfully!', 'success');
            };
            reader.onerror = () => {
                showToast('Error reading code file!', 'error');
            };
            reader.readAsText(file);
            
            // Reset file input
            event.target.value = '';
        }
        
        function loadTemplate(templateName) {
            const templates = {
                'basic': {
                    code: '{!print Hello World!}',
                    description: 'Basic "Hello World" example in OJANix'
                },
                'calculator': {
                    code: '{=a=}5\n{=b=}10\n{!print {=a=} + {=b=} = {!math {=a=}+{=b=}!} !}\n{!print {=a=} - {=b=} = {!math {=a=}-{=b=}!} !}\n{!print {=a=} * {=b=} = {!math {=a=}*{=b=}!} !}\n{!print {=a=} / {=b=} = {!math {=a=}/{=b=}!} !}',
                    description: 'Simple calculator that performs basic arithmetic operations'
                },
                'game': {
                    code: '{=score=}0\n{!print Welcome to the guessing game!!}\n{=secret=}{!math Math.floor(Math.random() * 100) + 1!}\n{!print I\'m thinking of a number between 1 and 100. Can you guess it?!}\n\n<!-- In a real game, you would add input handling -->',
                    description: 'Simple number guessing game framework'
                },
                'form': {
                    code: '<form onsubmit="{!alert Form submitted!!} return false;">\n  <label>Name: <input type="text" id="name"></label><br>\n  <label>Email: <input type="email" id="email"></label><br>\n  <button type="submit">Submit</button>\n</form>',
                    description: 'Basic form example with OJANix event handling'
                }
            };
            
            if (templates[templateName]) {
                ojanixCode.value = templates[templateName].code;
                templateDescription.value = templates[templateName].description;
                showToast(`Loaded ${templateName} template`, 'success');
            } else {
                showToast('Template not found', 'error');
            }
        }
        
        function loadExample(exampleName) {
            const examples = {
                'helloWorld': '{!print Hello World!}',
                'calculator': '{=a=}5{=b=}10{!print {=a=} + {=b=} = {!math {=a=}+{=b=}!} !}',
                'conditional': '{=age=}25{!if {=age=}>=18 then {!print Adult!} else {!print Minor!}!}',
                'loop': '{!loop 1 5 1}{!print Iteration {=i=}!}{!endloop!}'
            };
            
            if (examples[exampleName]) {
                ojanixCode.value = examples[exampleName];
                showToast(`Loaded ${exampleName} example`, 'success');
                switchMode('programming');
            } else {
                showToast('Example not found', 'error');
            }
        }
        
        // Settings Functions
        function applySettings() {
            autoSaveSetting.checked = currentSettings.autoSave;
            notificationsSetting.checked = currentSettings.notifications;
            animationsSetting.checked = currentSettings.animations;
            soundSetting.checked = currentSettings.sound;
            fontSizeSetting.value = currentSettings.fontSize;
            fontSizeValue.textContent = `${currentSettings.fontSize}px`;
            clearClipboardSetting.checked = currentSettings.clearClipboard;
            historyEncryptionSetting.checked = currentSettings.historyEncryption;
            
            // Apply font size
            document.querySelectorAll('textarea').forEach(ta => {
                ta.style.fontSize = `${currentSettings.fontSize}px`;
            });
        }
        
        function saveSettings() {
            currentSettings = {
                autoSave: autoSaveSetting.checked,
                notifications: notificationsSetting.checked,
                animations: animationsSetting.checked,
                sound: soundSetting.checked,
                fontSize: parseInt(fontSizeSetting.value),
                clearClipboard: clearClipboardSetting.checked,
                historyEncryption: historyEncryptionSetting.checked
            };
            
            localStorage.setItem('ojanixSettings', JSON.stringify(currentSettings));
            applySettings();
            showToast('Settings saved!', 'success');
        }
        
        function resetSettings() {
            currentSettings = {
                autoSave: true,
                notifications: true,
                animations: true,
                sound: false,
                fontSize: 16,
                clearClipboard: false,
                historyEncryption: false
            };
            
            localStorage.setItem('ojanixSettings', JSON.stringify(currentSettings));
            applySettings();
            showToast('Settings reset to defaults!', 'success');
        }
        
        function exportSettings() {
            const settingsData = JSON.stringify(currentSettings, null, 2);
            const blob = new Blob([settingsData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ojanix-settings-${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('Settings exported!', 'success');
        }
        
        function importSettings() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = e => {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = event => {
                    try {
                        const settings = JSON.parse(event.target.result);
                        currentSettings = settings;
                        localStorage.setItem('ojanixSettings', JSON.stringify(currentSettings));
                        applySettings();
                        showToast('Settings imported successfully!', 'success');
                    } catch (error) {
                        showToast(`Error importing settings: ${error.message}`, 'error');
                    }
                };
                reader.onerror = () => {
                    showToast('Error reading settings file', 'error');
                };
                reader.readAsText(file);
            };
            input.click();
        }
        
        function backupData() {
            const backup = {
                settings: currentSettings,
                history: translationsHistory,
                customMapping: currentCustomMapping,
                code: ojanixCode.value,
                timestamp: new Date().toISOString()
            };
            
            const backupData = JSON.stringify(backup, null, 2);
            const blob = new Blob([backupData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `ojanix-backup-${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('Backup created successfully!', 'success');
        }
        
        function restoreBackup() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = e => {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = event => {
                    try {
                        const backup = JSON.parse(event.target.result);
                        
                        if (backup.settings) {
                            currentSettings = backup.settings;
                            localStorage.setItem('ojanixSettings', JSON.stringify(currentSettings));
                        }
                        
                        if (backup.history) {
                            translationsHistory = backup.history;
                            localStorage.setItem('ojanixHistory', JSON.stringify(translationsHistory));
                        }
                        
                        if (backup.customMapping) {
                            currentCustomMapping = backup.customMapping;
                            localStorage.setItem('ojanixCustomMapping', JSON.stringify(currentCustomMapping));
                        }
                        
                        if (backup.code) {
                            ojanixCode.value = backup.code;
                        }
                        
                        applySettings();
                        renderHistory();
                        showToast('Backup restored successfully!', 'success');
                    } catch (error) {
                        showToast(`Error restoring backup: ${error.message}`, 'error');
                    }
                };
                reader.onerror = () => {
                    showToast('Error reading backup file', 'error');
                };
                reader.readAsText(file);
            };
            input.click();
        }
        
        function clearAllData() {
            if (confirm('Are you sure you want to clear ALL data? This cannot be undone!')) {
                localStorage.clear();
                translationsHistory = [];
                currentCustomMapping = {};
                currentSettings = {
                    autoSave: true,
                    notifications: true,
                    animations: true,
                    sound: false,
                    fontSize: 16,
                    clearClipboard: false,
                    historyEncryption: false
                };
                
                inputText.value = '';
                outputText.value = '';
                ojanixCode.value = '';
                customMapping.value = '';
                preProcessScript.value = '';
                postProcessScript.value = '';
                batchInput.value = '';
                batchOutput.value = '';
                consoleOutput.value = '';
                variablesWatch.value = '';
                callStack.value = '';
                
                applySettings();
                renderHistory();
                showToast('All data cleared!', 'success');
            }
        }
        
        function updateFontSizePreview() {
            const size = fontSizeSetting.value;
            fontSizeValue.textContent = `${size}px`;
        }
    </script>
</body>
</html>